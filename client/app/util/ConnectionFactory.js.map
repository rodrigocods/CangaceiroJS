{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConn","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","response","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConn"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;;AAEA,gBAAIC,aAAa,IAAjB;;AAEA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CACP;AACIC,8BACA;AACI,0BAAM,IAAIC,KAAJ,CAAU,+DAAV,CAAN;AACH;;AAED,uBAAOC,OAAP,GACA;AACI,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KACnB;AACI,4BAAGR,UAAH,EAAe,OAAOO,QAAQP,UAAR,CAAP;AACf,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,YAC9B;AACIX,8CAAkBY,aAAlB,CAAgCD,SAASE,MAAT,CAAgBC,MAAhD;AACH,yBAHD;;AAKAP,oCAAYQ,SAAZ,GAAwBJ,YACxB;AACIb,yCAAaa,SAASE,MAAT,CAAgBC,MAA7B;;AAEAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,uCAAWC,KAAX,GAAmB,MACnB;AACI,sCAAM,IAAIG,KAAJ,CAAU,uCAAV,CAAN;AACH,6BAHD;;AAKAG,oCAAQM,SAASE,MAAT,CAAgBC,MAAxB;AACH,yBAZD;;AAcAP,oCAAYU,OAAZ,GAAsBN,YACtB;AACIO,oCAAQC,GAAR,CAAYR,SAASE,MAAT,CAAgBO,KAA5B;AACAd,mCAAOK,SAASE,MAAT,CAAgBQ,IAAvB;AACH,yBAJD;AAKH,qBA7BM,CAAP;AA8BH;;AAED,uBAAOT,aAAP,CAAqBd,UAArB,EACA;AACID,2BAAOyB,OAAP,CAAeC,SACf;AACI,4BAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EAAgDzB,WAAW4B,iBAAX,CAA6BH,KAA7B;;AAEhDzB,mCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AACH,qBALD;AAOH;;AAED,uBAAOC,SAAP,GACA;AACI,wBAAG/B,UAAH,EACA;AACIC;AACH;AACJ;AAzDL","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\r\n\r\nlet connection = null;\r\n\r\nlet close = null;\r\n\r\nexport class ConnectionFactory\r\n{\r\n    constructor()\r\n    {\r\n        throw new Error(\"Não é necessário criar instâncias da classe ConnectionFactory\");\r\n    }\r\n\r\n    static getConn()\r\n    {\r\n        return new Promise((resolve, reject) => \r\n        {\r\n            if(connection) return resolve(connection);\r\n            const openRequest = indexedDB.open(\"cangaceirojs\", 2);\r\n\r\n            openRequest.onupgradeneeded = response => \r\n            {\r\n                ConnectionFactory._createStores(response.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = response =>\r\n            {\r\n                connection = response.target.result;\r\n\r\n                close = connection.close.bind(connection);\r\n\r\n                connection.close = () => \r\n                {\r\n                    throw new Error('Você não fechar a conexão diretamente');\r\n                };\r\n\r\n                resolve(response.target.result);\r\n            };\r\n\r\n            openRequest.onerror = response =>\r\n            {\r\n                console.log(response.target.error)\r\n                reject(response.target.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    static _createStores(connection)\r\n    {\r\n        stores.forEach(store => \r\n        {\r\n            if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n\r\n    }\r\n\r\n    static closeConn()\r\n    {\r\n        if(connection)\r\n        {\r\n            close();\r\n        }\r\n    }\r\n}"]}